import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
import requests
import os

from datetime import datetime
import asyncio
from typing import Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
TOKEN = "TOKEN"

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Secrets –≤ Replit")

# UniverseId, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º
TARGET_UNIVERSE_ID = 7090482051

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞–¥–∞—á –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
user_tasks: Dict[int, asyncio.Task] = {}
user_messages: Dict[int, int] = {}

async def get_roblox_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Roblox API."""
    try:
        url = f"https://games.roblox.com/v1/games?universeIds={TARGET_UNIVERSE_ID}"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        if not data["data"]:
            return None

        game_data = data["data"][0]
        return {
            "name": game_data.get("name", "N/A"),
            "playing": game_data.get("playing", "N/A"),
            "visits": game_data.get("visits", "N/A"),
            "favorits": game_data.get("favoritedCount", "N/A"),
            "time": datetime.now().strftime("%H:%M:%S")
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Roblox API: {e}")
        return None

async def update_stats(context: CallbackContext, chat_id: int, message_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    while True:
        try:
            stats = await get_roblox_stats()
            if stats:
                text = (
                    f"üìä –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {stats['name']}\n"
                    f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['time']}\n"
                    f"üë• –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: {stats['playing']}\n"
                    f"üö™ –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: {stats['visits']}\n"
                    f"‚≠ê –í—Å–µ–≥–æ —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤: {stats['favorits']}\n"
                    f"\n–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: /stopauto"
                )
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=text
                )
            await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            break

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –û—Å—Ç—Ä–æ–≤–µ –ë–ª–æ–ø—Ç–æ–ø.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/online - —Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
        "/autoonline - –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)\n"
        "/stopauto - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    )

async def online(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    stats = await get_roblox_stats()
    if stats:
        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {stats['name']}\n"
            f"üë• –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: {stats['playing']}\n"
            f"üö™ –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: {stats['visits']}\n"
            f"‚≠ê –í—Å–µ–≥–æ —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤: {stats['favorits']}"
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

async def autoonline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    if user_id in user_tasks:
        user_tasks[user_id].cancel()
        del user_tasks[user_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    stats = await get_roblox_stats()
    if not stats:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    msg = await update.message.reply_text(
        f"üìä –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {stats['name']}\n"
        f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['time']}\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: {stats['playing']}\n"
        f"üö™ –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: {stats['visits']}\n"
        f"‚≠ê –í—Å–µ–≥–æ —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤: {stats['favorits']}\n"
        f"\n–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: /stopauto"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    user_messages[user_id] = msg.message_id
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    task = asyncio.create_task(update_stats(context, chat_id, msg.message_id))
    user_tasks[user_id] = task
    
    logger.info(f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è {user_id}")

async def stopauto(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."""
    user_id = update.effective_user.id
    
    if user_id in user_tasks:
        user_tasks[user_id].cancel()
        del user_tasks[user_id]
        await update.message.reply_text("‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        logger.info(f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ –¥–ª—è {user_id}")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ 'I'm alive' –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("online", online))
    application.add_handler(CommandHandler("autoonline", autoonline))
    application.add_handler(CommandHandler("stopauto", stopauto))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
